// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fabchain/fab/manufacture.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Manufacture struct {
	Id              uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner           string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Name            string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Pricer          []string `protobuf:"bytes,4,rep,name=pricer,proto3" json:"pricer,omitempty"`
	PaymentProvider string   `protobuf:"bytes,5,opt,name=paymentProvider,proto3" json:"paymentProvider,omitempty"`
	PaymentAddress  string   `protobuf:"bytes,6,opt,name=paymentAddress,proto3" json:"paymentAddress,omitempty"`
	Creator         string   `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Manufacture) Reset()         { *m = Manufacture{} }
func (m *Manufacture) String() string { return proto.CompactTextString(m) }
func (*Manufacture) ProtoMessage()    {}
func (*Manufacture) Descriptor() ([]byte, []int) {
	return fileDescriptor_0210c53c9dadd1e8, []int{0}
}
func (m *Manufacture) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manufacture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manufacture.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manufacture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manufacture.Merge(m, src)
}
func (m *Manufacture) XXX_Size() int {
	return m.Size()
}
func (m *Manufacture) XXX_DiscardUnknown() {
	xxx_messageInfo_Manufacture.DiscardUnknown(m)
}

var xxx_messageInfo_Manufacture proto.InternalMessageInfo

func (m *Manufacture) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Manufacture) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Manufacture) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Manufacture) GetPricer() []string {
	if m != nil {
		return m.Pricer
	}
	return nil
}

func (m *Manufacture) GetPaymentProvider() string {
	if m != nil {
		return m.PaymentProvider
	}
	return ""
}

func (m *Manufacture) GetPaymentAddress() string {
	if m != nil {
		return m.PaymentAddress
	}
	return ""
}

func (m *Manufacture) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type EventCreateManufacture struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EventCreateManufacture) Reset()         { *m = EventCreateManufacture{} }
func (m *EventCreateManufacture) String() string { return proto.CompactTextString(m) }
func (*EventCreateManufacture) ProtoMessage()    {}
func (*EventCreateManufacture) Descriptor() ([]byte, []int) {
	return fileDescriptor_0210c53c9dadd1e8, []int{1}
}
func (m *EventCreateManufacture) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateManufacture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateManufacture.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateManufacture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateManufacture.Merge(m, src)
}
func (m *EventCreateManufacture) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateManufacture) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateManufacture.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateManufacture proto.InternalMessageInfo

func (m *EventCreateManufacture) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Manufacture)(nil), "fabchain.fab.Manufacture")
	proto.RegisterType((*EventCreateManufacture)(nil), "fabchain.fab.EventCreateManufacture")
}

func init() { proto.RegisterFile("fabchain/fab/manufacture.proto", fileDescriptor_0210c53c9dadd1e8) }

var fileDescriptor_0210c53c9dadd1e8 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xeb, 0x34, 0x4d, 0xd5, 0x03, 0x15, 0xc9, 0xaa, 0x2a, 0x4f, 0x56, 0xd4, 0x01, 0x65,
	0x4a, 0x07, 0x9e, 0x00, 0x10, 0x23, 0x12, 0xca, 0xc8, 0xe6, 0xc4, 0x17, 0xe1, 0x21, 0x76, 0x74,
	0x71, 0x0b, 0x7d, 0x0b, 0x1e, 0x0b, 0x89, 0xa5, 0x23, 0x23, 0x4a, 0x5e, 0x04, 0x61, 0x5a, 0x90,
	0x3a, 0xb0, 0xdd, 0xf7, 0xdd, 0x7f, 0xc3, 0xfd, 0x20, 0x6b, 0x55, 0x56, 0x4f, 0xca, 0xd8, 0x75,
	0xad, 0xca, 0x75, 0xa3, 0xec, 0xa6, 0x56, 0x95, 0xdf, 0x10, 0xe6, 0x2d, 0x39, 0xef, 0xf8, 0xf9,
	0x71, 0x9f, 0xd7, 0xaa, 0x5c, 0xbd, 0x33, 0x38, 0xbb, 0xff, 0xcb, 0xf0, 0x39, 0x44, 0x46, 0x0b,
	0x96, 0xb2, 0x2c, 0x2e, 0x22, 0xa3, 0xf9, 0x02, 0x26, 0xee, 0xd9, 0x22, 0x89, 0x28, 0x65, 0xd9,
	0xac, 0xf8, 0x01, 0xce, 0x21, 0xb6, 0xaa, 0x41, 0x31, 0x0e, 0x32, 0xcc, 0x7c, 0x09, 0x49, 0x4b,
	0xa6, 0x42, 0x12, 0x71, 0x3a, 0xce, 0x66, 0xc5, 0x81, 0x78, 0x06, 0x17, 0xad, 0xda, 0x35, 0x68,
	0xfd, 0x03, 0xb9, 0xad, 0xd1, 0x48, 0x62, 0x12, 0xce, 0x4e, 0x35, 0xbf, 0x84, 0xf9, 0x41, 0x5d,
	0x6b, 0x4d, 0xd8, 0x75, 0x22, 0x09, 0xc1, 0x13, 0xcb, 0x05, 0x4c, 0x2b, 0x42, 0xe5, 0x1d, 0x89,
	0x69, 0x08, 0x1c, 0x71, 0x95, 0xc1, 0xf2, 0x6e, 0x8b, 0xd6, 0xdf, 0x7e, 0x33, 0xfe, 0xf3, 0xd7,
	0x4d, 0xfe, 0xd6, 0x4b, 0xb6, 0xef, 0x25, 0xfb, 0xec, 0x25, 0x7b, 0x1d, 0xe4, 0x68, 0x3f, 0xc8,
	0xd1, 0xc7, 0x20, 0x47, 0x8f, 0x8b, 0xdf, 0xfe, 0x5e, 0x42, 0x83, 0x7e, 0xd7, 0x62, 0x57, 0x26,
	0xa1, 0xbc, 0xab, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xfb, 0xd1, 0x6e, 0x5e, 0x01, 0x00,
	0x00,
}

func (m *Manufacture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manufacture) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manufacture) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintManufacture(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PaymentAddress) > 0 {
		i -= len(m.PaymentAddress)
		copy(dAtA[i:], m.PaymentAddress)
		i = encodeVarintManufacture(dAtA, i, uint64(len(m.PaymentAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PaymentProvider) > 0 {
		i -= len(m.PaymentProvider)
		copy(dAtA[i:], m.PaymentProvider)
		i = encodeVarintManufacture(dAtA, i, uint64(len(m.PaymentProvider)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pricer) > 0 {
		for iNdEx := len(m.Pricer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pricer[iNdEx])
			copy(dAtA[i:], m.Pricer[iNdEx])
			i = encodeVarintManufacture(dAtA, i, uint64(len(m.Pricer[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintManufacture(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintManufacture(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintManufacture(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateManufacture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateManufacture) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateManufacture) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintManufacture(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintManufacture(dAtA []byte, offset int, v uint64) int {
	offset -= sovManufacture(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Manufacture) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovManufacture(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovManufacture(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManufacture(uint64(l))
	}
	if len(m.Pricer) > 0 {
		for _, s := range m.Pricer {
			l = len(s)
			n += 1 + l + sovManufacture(uint64(l))
		}
	}
	l = len(m.PaymentProvider)
	if l > 0 {
		n += 1 + l + sovManufacture(uint64(l))
	}
	l = len(m.PaymentAddress)
	if l > 0 {
		n += 1 + l + sovManufacture(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovManufacture(uint64(l))
	}
	return n
}

func (m *EventCreateManufacture) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovManufacture(uint64(m.Id))
	}
	return n
}

func sovManufacture(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManufacture(x uint64) (n int) {
	return sovManufacture(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Manufacture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManufacture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manufacture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manufacture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManufacture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManufacture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManufacture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManufacture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManufacture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManufacture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pricer = append(m.Pricer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManufacture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManufacture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManufacture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManufacture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManufacture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManufacture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManufacture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManufacture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateManufacture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManufacture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateManufacture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateManufacture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManufacture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManufacture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManufacture(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManufacture
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManufacture
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManufacture
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManufacture
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManufacture
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManufacture        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManufacture          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManufacture = fmt.Errorf("proto: unexpected end of group")
)
